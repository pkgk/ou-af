from jpype import JPackage, JClass, getDefaultJVMPath, startJVM, java # type:ignore # pip install jpype1==0.7.5   (for Java 7, pip install jpype1 0.6.3, and remove convertStrings=False)

import sys

from typing import List, Iterable, Any, Literal, Optional, overload, ClassVar, TypeVar, Union, Type


if sys.version_info < (3, 8):
    from typing_extensions import Protocol  # for Python <= 3.7
else:
    from typing import Protocol  # for Python >= 3.8

from enum import Enum

# Mirroring the Bayes Server API (only the parts that are used in this program):

class Group(Protocol): 
    def getName(self) -> str: ...

class GroupList(Protocol):
    def add(self, name:str) -> None: ...

class Distribution(Protocol): 
    def getTable(self) -> "TableT": ...
    def copy(self) -> "Distribution": ...
    def add(self, table:"TableT") -> None: ...

class VarState(Protocol): 
    def getName(self) -> str: ...

class VarStates(Iterable[VarState], Protocol): 
    def get(self, str:str) -> Optional[VarState]: ...

class Variable(Protocol): 
    def getStates(self) -> VarStates: ...
    def getName(self) -> str: ...
    def setName(self, name:str) -> None: ...

class VariableContext(Protocol):
    def getVariable(self) -> Variable:... 

class TableT(Distribution): 
    def get(self, states:List[VarState]) -> float: ...
    def set(self, index: int, value:float) -> None: ...
    def size(self) -> int: ...
    def randomize(self, random) -> None: ...
    # from Distribution:
    def getTable(self) -> "TableT": ...
    def copy(self) -> "Distribution": ...
    def add(self, table:"TableT") -> None: ...
    def normalize(self) -> None: ...
    def copyTo(self, destination:"TableT") -> None: ...
    def getSortedVariables(self) -> List[VariableContext]: ...

class Bounds(Protocol):
    pass  # how to specify constructor?

class Node(Protocol): 
    def getVariables(self) -> List[Variable]: ...
    def getName(self) -> str: ...
    def getGroups(self) -> GroupList: ...
    def newDistribution(self) -> Distribution: ...
    def getDistribution(self) -> Distribution: ...
    def setDistribution(self, distribution: Distribution): ...
    def getLinksIn(self) -> List["Link"]: ...
    def getLinksOut(self) -> List["Link"]: ...
    def setBounds(self, bounds:Bounds) -> None: ...
    def copy(self) -> "Node": ...
    def setName(self, name:str) -> None: ...
    def getIndex(self) -> int: ...

class NodeCollection(Iterable[Node]):
    def add(self, node: Node) -> None: ...
    def contains(self, node: Node) -> bool: ...
    @overload
    def get(self, nodeName: str) -> Node: ...
    @overload
    def get(self, index: int) -> Node: ...
    def remove(self, node: Node) -> bool: ...
    
class Link(Protocol): 
    def getFrom(self) -> Node:...
    def getTo(self) -> Node:...

class LinkCollection(Protocol):
    def add(self, link: Link) -> None: ...
    def remove(self, link: Link) -> bool: ...
    def contains(self, link: Link) -> bool: ...

class CustomProperty(Protocol):
    pass

class CustomPropertyCollection(Protocol):
    def add(self, property:CustomProperty) -> None: ...

class NodeGroup(Protocol): 
    def getCustomProperties(self) -> CustomPropertyCollection: ...

class NodeGroupCollection(Protocol):
    def add(self, group: NodeGroup) -> None: ...

class Network(Protocol): 
    def load(self, filename:str) -> None: ...
    def save(self, filename:str) -> None: ...
    def getName(self) -> str: ...
    def getNodes(self) -> NodeCollection: ...
    def getNodeGroups(self) -> NodeGroupCollection: ...
    def getLinks(self) -> LinkCollection: ...
    def setName(self, name:str) -> None: ...
    def copy(self) -> "Network": ...

class TableAccessor(Protocol):
    def set(self, index:int, value:float) -> None: ...
    def get(self, index:int) -> float: ...

class TableIterator(Protocol):
    def size(self) -> int: ...
    def getStates(self, states) -> None: ...
    def getValue(self) -> float: ...
    def setValue(self, value:float) -> None: ...
    def increment(self) -> None: ...
    def copyFrom(self, values:List[float]) -> None: ...


class InterventionType(Protocol): 
    NONE: ClassVar['InterventionType']
    DO: ClassVar['InterventionType']
    NOT_APPLICABLE: ClassVar['InterventionType']
    
class EvidenceTypes(Protocol):
    def getInterventionType(self) -> InterventionType: ...

class Evidence(Protocol):
    def load(self, filename:str) -> None: ...
    def save(self, filename:str) -> None: ...
    def copy(self, evidence:"Evidence") -> "Evidence": ...
    def set(self, variable:Variable, value:float) -> None: ...
    @overload
    def setState(self, state: VarState) -> None: ...
    @overload
    def setState(self, state:VarState, time:int | None, interventionType:InterventionType) -> None: ...  # allow None for time
    @overload
    def getState(self, node:Node) -> int: ...
    @overload
    def getState(self, variable:Variable) -> int: ...
    def getEvidenceTypes(self, node:None) -> EvidenceTypes: ...
    @overload
    def clear(self) -> None: ...
    @overload
    def clear(self, node: Node) -> None: ...

class LogarithmBase(Protocol):
    @property
    def NATURAL(self) -> "LogarithmBase": ...

class Entropy(Protocol):
    def calculate(self, table:TableT, logarithmBase:LogarithmBase) -> float: ...

class Statistics(Protocol):
    @property
    def LogarithmBase(self) -> LogarithmBase: ...
    @property
    def Entropy(self) -> Entropy: ...

class QueryOptions(Protocol):
    ...

class QueryOutput(Protocol):
    ...

class QueryDistributionT(Protocol):
    ...

class Inference(Protocol):
    @classmethod
    def QueryDistribution(cls, query: Distribution) -> QueryDistributionT: ...
    @property
    def InterventionType(self) -> InterventionType: ...
    def getEvidence(self) -> Evidence: ...
    def RelevanceTreeInferenceFactory(self) -> "InferenceFactory": ...
    def getNetwork(self) -> Network: ...
    def getQueryDistributions(self) -> List[QueryDistributionT]: ...


class InferenceFactory(Protocol):
    def createInferenceEngine(self, network:Network) -> Inference: ...
    def createQueryOptions(self) -> QueryOptions: ...
    def createQueryOutput(self) -> QueryOutput: ...

class BayesServer(Protocol):
    @classmethod
    def Network(cls, name:str) -> Network: ...
    @classmethod
    def Bounds(cls, x:int,y:int,width:int,height:int) -> Bounds: ...
    @classmethod
    def Link(cls, fromNode:Node, toNode:Node) -> Link: ...
    @classmethod
    def CustomProperty(cls, guid:str,name:str) -> CustomProperty: ...
    @classmethod
    def NodeGroup(cls, groupname:str) -> NodeGroup: ...
    @classmethod
    @overload
    def TableAccessor(cls, table:TableT, nodes:List[Node]) -> TableAccessor: ...
    @classmethod
    @overload
    def TableAccessor(cls, table:TableT, variables:List[Variable]) -> "TableAccessor": ...
    @classmethod
    @overload
    def TableIterator(cls, table:TableT, nodes:List[Node]) -> TableIterator: ...
    @classmethod
    @overload
    def TableIterator(cls, table:TableT, variables:List[Variable]) -> "TableIterator": ...
    @overload
    def TableIterator(cls, table:TableT, variables:List[VariableContext]) -> "TableIterator": ...
    @classmethod
    @overload
    def Node(cls, name:str, statenames:List[str]) -> Node: ...
    @classmethod
    @overload
    def Node(cls, name:str, *variables:Variable) -> "Node": ...    
    @classmethod
    @overload
    def Table(cls, table:TableT) -> TableT: ...
    @classmethod
    @overload
    def Table(cls, variables:List[Variable]) -> TableT: ...
    @classmethod
    def Variable(cls, name:str, statenames:List[str]) -> Variable: ...
    @classmethod
    def Evidence(cls, name:str) -> Evidence: ...
    @property
    def statistics(self) -> Statistics: ...
    @property
    def inference(self) -> Inference: ...



class LicenseT(Protocol):
    @classmethod
    def validate(cls, code:str) -> None: ...

print(getDefaultJVMPath()) # type: ignore
classpath = "C:\\Program Files\\Bayes Server\\Bayes Server 9.5\\API\\Java\\bayesserver-9.5.jar"
startJVM(getDefaultJVMPath(), f"-Djava.class.path={classpath}", convertStrings=False)  # type: ignore

bayesServer = JPackage("com.bayesserver") # type: BayesServer
bayesServerInference = JPackage("com.bayesserver.inference") # type: Inference

# Check for valid package to fail fast.
network = bayesServer.Network("dummy for test")
